
$methods = [System.Management.Automation.Language.ICustomAstVisitor].GetMethods() + [System.Management.Automation.Language.ICustomAstVisitor2].GetMethods()

function IsEnumerable([Type]$Type) {
    if ($Type -eq [string] -or [System.Management.Automation.Language.Ast].IsAssignableFrom($type)) { return $false; }
    $interfaces = $Type.GetInterfaces()
    $enumerableInterface = $interfaces.Where({$_.IsGenericType -and [System.Collections.Generic.IEnumerable`1].IsAssignableFrom($_.GetGenericTypeDefinition())})
    return $enumerableInterface -ne $null
}

@'
using namespace System.Management.Automation;
using namespace System.Management.Automation.Language;
using namespace System.Collections.Generic;

##############################################
### This code was generated by a tool.
##############################################

class AstComparer : ICustomAstVisitor2 {
   static [object]Compare([Ast]$actual, [Ast]$expected) {
      $comparer = [AstComparer]::new();
      $comparer._actual.Push($actual);
      return $expected.Visit($comparer);
   }

   hidden [Stack[Ast]]$_actual = [Stack[Ast]]::new();

   hidden [bool]CompareValues($expected, $actual) {
      if ($null -eq $expected -or $null -eq $actual) {
         return $expected -eq $actual;
      } elseif ($expected.GetType() -ne $actual.GetType()) {
         return false;
      } elseif ($expected -is [VariablePath]) {
         return $expected.UserPath -eq $actual.UserPath -and 
                $expected.IsLocal -eq $actual.IsLocal -and
                $expected.IsPrivate -eq $actual.IsPrivate -and
                $expected.IsScript -eq $actual.IsScript -and
                $expected.IsUnqualified -eq $actual.IsUnqualified -and
                $expected.IsUnscopedVariable -eq $actual.IsUnscopedVariable -and
                $expected.IsVariable -eq $actual.IsVariable -and
                $expected.IsDriveQualified -eq $actual.IsDriveQualified -and
                $expected.DriveName -eq $actual.DriveName
      } else {
         return $expected -eq $actual;
      }
   }

   hidden [PSCustomObject] RaiseError([Ast]$actualAst, [Ast]$expectedAst, [string]$property, [object]$actualValue, [object]$expectedValue, [string]$message) {
      return [PSCustomObject][ordered]@{
         Message = $message
         ActualAst = $actualAst
         ExpectedAst = $expectedAst
         Property = $property
         ActualValue = $actualValue
         ExpectedValue = $expectedValue
      };
   }
'@

foreach ($method in $methods) {
    $t = @'
   [object] {0}([{1}]${2}) {{
      Write-Debug -Message "AstComparer::{0}"
      if ($this._actual.Peek().GetType() -ne [{1}]) {{ throw 'Invalid type.' }}
{3}
   }}

'@
    $parameter = $method.GetParameters()[0]
    $indent = "`r`n" + ' ' * 6
    $indent2 = "`r`n" + ' ' * 9
    $indent3 = "`r`n" + ' ' * 12

    $properties = @($parameter.ParameterType.GetProperties([System.Reflection.BindingFlags]::Instance -bor [System.Reflection.BindingFlags]::Public).Where({$_.CanRead -and $_.Name -ne 'Parent' -and -not [System.Management.Automation.Language.IScriptExtent].IsAssignableFrom($_.PropertyType)}))

    $astProperties = $properties.Where({[System.Management.Automation.Language.Ast].IsAssignableFrom($_.PropertyType)})
    $astCollectionProperties = $properties.Where({[System.Collections.Generic.IEnumerable[System.Management.Automation.Language.Ast]].IsAssignableFrom($_.PropertyType)})
    $otherProperties = $properties.Where({$astProperties -notcontains $_ -and $astCollectionProperties -notcontains $_ })

    $body = ""

    $thisRef = '$' + $parameter.Name;
    $stackRef = '$this._actual'
    $otherRef = $stackREf + '.Peek()'

    foreach ($property in $otherProperties) {
        $body += $indent + '#########################'
        $body += $indent + "### "  + $property.Name + ' [' + $property.PropertyType.Name +  ']'
        $body += $indent + '#########################'
        $body += $indent + ('Write-Debug -Message "AstComparer::{0}::{1}"' -f $method.Name,$property.Name)
        
        $propName = $property.Name
        $otherPropRef = $otherRef + '.' + $propName;
        $thisPropRef = $thisRef + '.' + $propName;

        if ($propName -eq 'Flags' -and $parameter.ParameterType -eq [System.Management.Automation.Language.ErrorStatementAst]) { 
$body += @"

      if (`$null -eq $otherPropRef -xor `$null -eq $thisPropRef) {
         return `$this.RaiseError($otherRef, $thisRef, '$propName', $otherPropRef, $thisPropRef, 'One side is null.'); 
      } elseif ($otherPropRef -ne `$null) {
         if ($otherPropRef.Count -ne $thisPropRef.Count) { 
            return `$this.RaiseError($otherRef, $thisRef, '$propName', $otherPropRef, $thisPropRef, 'Item count is not equal.'); 
         } else {
            foreach(`$key in $thisPropRef.Keys) {
               `$otherValue = `$null;
               if (-not $otherPropRef.TryGetValue(`$key, [ref]`$otherValue)) {
                  return `$this.RaiseError($otherRef, $thisRef, '$propName', `$null, $thisPropRef[`$key], `"Item with key '`$key' not found.`"); 
               } elseif (-not `$this.CompareValues(`$otherValue.Item1, $thisPropRef[`$key].Item1)) {
                  return `$this.RaiseError($otherRef, $thisRef, '$propName', `$otherValue, $thisPropRef[`$key], `"Items with key '`$key' are not equal.`"); 
               } else {
                 $stackRef.Push(`$otherValue.Item2);
                 `$result = $thisPropRef[`$key].Item2.Visit(`$this);
                 $stackRef.Pop() | Out-Null;
                 if (`$result -ne `$null) { return `$result; }                
               }
            }
         }
      }
"@
      } elseif (($propName -eq 'Clauses' -and @([System.Management.Automation.Language.IfStatementAst], [System.Management.Automation.Language.SwitchStatementAst]) -contains $parameter.ParameterType) -or ($propName -eq 'KeyValuePairs' -and $parameter.ParameterType -eq [System.Management.Automation.Language.HashtableAst])) { 
$body += @"

         if ($otherPropRef.Count -ne $thisPropRef.Count) { 
            return `$this.RaiseError($otherRef, $thisRef, '$propName', $otherPropRef.Count, $thisPropRef.Count, 'Item count is not equal.'); 
         } else {
            for (`$i = 0; `$i -lt $thisPropRef.Count; `$i++) {
               $stackRef.Push($otherPropRef[`$i].Item1);
               `$result = $thisPropRef[`$i].Item1.Visit(`$this);
               $stackRef.Pop() | Out-Null;
               if (`$result -ne `$null) { return `$result; }
           
               $stackRef.Push($otherPropRef[`$i].Item2);
               `$result = $thisPropRef[`$i].Item2.Visit(`$this);
               $stackRef.Pop() | Out-Null;
               if (`$result -ne `$null) { return `$result; }
            }
         }
"@

        } elseif (IsEnumerable($property.PropertyType)) {
$body += @"

      if (`$null -eq $otherPropRef -xor `$null -eq $thisPropRef) {
         return `$this.RaiseError($otherRef, $thisRef, '$propName', $otherPropRef, $thisPropRef, 'One side is null.'); 
      } elseif (`$null -ne $otherPropRef) {
         if ($otherPropRef.Count -ne $thisPropRef.Count) { 
            return `$this.RaiseError($otherRef, $thisRef, '$propName', $otherPropRef, $thisPropRef, 'Item count is not equal.'); 
         } else {
            for (`$i = 0; `$i -lt $thisPropRef.Count; `$i++) {
               if (-not `$this.CompareValues($otherPropRef[`$i], $thisPropRef[`$i])) {
                  return `$this.RaiseError($otherRef, $thisRef, '$propName', $otherPropRef[`$i], $thisPropRef[`$i], `"Items at index `$i are not equal.`"); 
               }
            }
         }
      }
"@
        } else {

$body += @"

      if (-not `$this.CompareValues($otherPropRef,$thisPropRef)) { 
         return `$this.RaiseError($otherRef, $thisRef, '$propName', $otherPropRef, $thisPropRef, 'Expected values to be equal.'); 
      }
"@
        }
        $body += $indent;
    }

    foreach ($property in $astProperties) {
        $body += $indent + '#########################'
        $body += $indent + "### "  + $property.Name + ' [' + $property.PropertyType.Name +  ']'
        $body += $indent + '#########################'
        $body += $indent + ('Write-Debug -Message "AstComparer::{0}::{1}"' -f $method.Name,$property.Name)
        $otherPropRef = $otherRef + '.' + $property.Name;
        $thisPropRef = $thisRef + '.' + $property.Name;
        $propName = $property.Name

$body += @"

      if (`$null -eq $otherPropRef -xor `$null -eq $thisPropRef) {
         return `$this.RaiseError($otherRef, $thisRef, '$propName', $otherPropRef, $thisPropRef, 'One side is null.'); 
      } elseif (`$null -ne $otherPropRef) {
         if ($otherPropRef.GetType() -ne $thisPropRef.GetType()) {
            return `$this.RaiseError($otherRef, $thisRef, '$propName', $otherPropRef, $thisPropRef, 'Types are not equal.'); 
         }
         $stackRef.Push($otherPropRef);
         `$result = $thisPropRef.Visit(`$this);
         $stackRef.Pop() | Out-Null;
         if (`$result -ne `$null) { return `$result; }
      }

"@
    }

    foreach ($property in $astCollectionProperties) {
        $body += $indent + '#########################'
        $body += $indent + "### "  + $property.Name + ' [' + $property.PropertyType.Name +  ']'
        $body += $indent + '#########################'
        $body += $indent + ('Write-Debug -Message "AstComparer::{0}::{1}"' -f $method.Name,$property.Name)
        $otherPropRef = $otherRef + '.' + $property.Name;
        $thisPropRef = $thisRef + '.' + $property.Name;
        $propName = $property.Name

$body += @"

      if (`$null -eq $otherPropRef -xor `$null -eq $thisPropRef) {
         return `$this.RaiseError($otherRef, $thisRef, '$propName', $otherPropRef, $thisPropRef, 'One side is null.'); 
      } elseif ($otherPropRef -ne `$null) {
         if ($otherPropRef.Count -ne $thisPropRef.Count) { 
            return `$this.RaiseError($otherRef, $thisRef, '$propName', $otherPropRef, $thisPropRef, 'Item count is not equal.'); 
         } else {
            for (`$i = 0; `$i -lt $thisPropRef.Count; `$i++) {
               if ($otherPropRef[`$i].GetType() -ne $thisPropRef[`$i].GetType()) {
                  return `$this.RaiseError($otherRef, $thisRef, `"$propName[`$i]`", $otherPropRef[`$i], $thisPropRef[`$i], 'Types are not equal.'); 
               }
               $stackRef.Push($otherPropRef[`$i])
               `$result = $thisPropRef[`$i].Visit(`$this);
               $stackRef.Pop() | Out-Null;
               if (`$result -ne `$null) { return `$result; }
            }
         }
      }

"@
    }

    $body += $indent + 'return $null;'

    $t -f $method.Name,$parameter.ParameterType.Name,$parameter.Name, $body
}

'}'